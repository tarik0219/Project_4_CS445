{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# jupyter extension that allows reloading functions from imports without clearing kernel :D\n",
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# System imports\n",
    "from os import path\n",
    "import math\n",
    "\n",
    "# Third-Party Imports\n",
    "import cv2\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from scipy.interpolate import griddata\n",
    "\n",
    "# local imports\n",
    "from utils.io import read_image, write_image, read_hdr_image, write_hdr_image\n",
    "from utils.display import display_hdr_image_linear, display_hdr_image, display_log_irradiances\n",
    "from utils.hdr_helpers import gsolve\n",
    "from utils.hdr_helpers import get_equirectangular_image\n",
    "from utils.bilateral_filter import bilateral_filter\n",
    "from utils.meta import TODO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: Replace this with actual file path!\n",
    "low_exposure_mirror_ball_image_file = TODO()\n",
    "mid_exposure_mirror_ball_image_file = TODO()\n",
    "high_exposure_mirror_ball_image_file = TODO()\n",
    "background_image_file = TODO()\n",
    "\n",
    "\n",
    "# TODO: Extract exposure values for each images\n",
    "low_exposure = TODO()\n",
    "mid_exposure = TODO()\n",
    "high_exposure = TODO()\n",
    "\n",
    "\n",
    "\n",
    "# These images will be used for LDR mergings\n",
    "low_exposure_mirror_ball_image = read_image(low_exposure_mirror_ball_image_file)\n",
    "mid_exposure_mirror_ball_image = read_image(mid_exposure_mirror_ball_image_file)\n",
    "high_exposure_mirror_ball_image = read_image(high_exposure_mirror_ball_image_file)\n",
    "background_image = read_image(background_image_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# resize mirror ball images:\n",
    "# TODO: change size of N to your favorite value!\n",
    "N = TODO()\n",
    "low_exposure_mirror_ball_image = cv2.resize(low_exposure_mirror_ball_image, (N, N))\n",
    "mid_exposure_mirror_ball_image = cv2.resize(mid_exposure_mirror_ball_image, (N, N))\n",
    "high_exposure_mirror_ball_image = cv2.resize(high_exposure_mirror_ball_image, (N, N))\n",
    "\n",
    "\n",
    "ldr_images = np.stack((low_exposure_mirror_ball_image, \n",
    "                       mid_exposure_mirror_ball_image, \n",
    "                       high_exposure_mirror_ball_image))\n",
    "exposures = [low_exposure, mid_exposure, high_exposure]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: Replace this with actual file path!\n",
    "low_exposure_mirror_ball_image_file = 'samples/0553.jpg'\n",
    "mid_exposure_mirror_ball_image_file = 'samples/0120.jpg'\n",
    "high_exposure_mirror_ball_image_file = 'samples/0024.jpg'\n",
    "background_image_file = 'samples/empty.jpg'\n",
    "\n",
    "\n",
    "# TODO: Extract exposure values for each images\n",
    "low_exposure = float(1/553)\n",
    "mid_exposure = float(1/120)\n",
    "high_exposure = float(1/24)\n",
    "\n",
    "\n",
    "\n",
    "# These images will be used for LDR mergings\n",
    "low_exposure_mirror_ball_image = read_image(low_exposure_mirror_ball_image_file)\n",
    "mid_exposure_mirror_ball_image = read_image(mid_exposure_mirror_ball_image_file)\n",
    "high_exposure_mirror_ball_image = read_image(high_exposure_mirror_ball_image_file)\n",
    "background_image = read_image(background_image_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# resize mirror ball images:\n",
    "# TODO: change size of N to your favorite value!\n",
    "N = TODO()\n",
    "low_exposure_mirror_ball_image = cv2.resize(low_exposure_mirror_ball_image, (N, N))\n",
    "mid_exposure_mirror_ball_image = cv2.resize(mid_exposure_mirror_ball_image, (N, N))\n",
    "high_exposure_mirror_ball_image = cv2.resize(high_exposure_mirror_ball_image, (N, N))\n",
    "\n",
    "\n",
    "ldr_images = np.stack((low_exposure_mirror_ball_image, \n",
    "                       mid_exposure_mirror_ball_image, \n",
    "                       high_exposure_mirror_ball_image))\n",
    "exposures = [low_exposure, mid_exposure, high_exposure]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# resize mirror ball images:\n",
    "# TODO: change size of N to your favorite value!\n",
    "N = 300\n",
    "low_exposure_mirror_ball_image = cv2.resize(low_exposure_mirror_ball_image, (N, N))\n",
    "mid_exposure_mirror_ball_image = cv2.resize(mid_exposure_mirror_ball_image, (N, N))\n",
    "high_exposure_mirror_ball_image = cv2.resize(high_exposure_mirror_ball_image, (N, N))\n",
    "\n",
    "\n",
    "ldr_images = np.stack((low_exposure_mirror_ball_image, \n",
    "                       mid_exposure_mirror_ball_image, \n",
    "                       high_exposure_mirror_ball_image))\n",
    "exposures = [low_exposure, mid_exposure, high_exposure]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "ldr_images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def make_hdr_naive(ldr_images: np.ndarray, exposures: list) -> (np.ndarray, np.ndarray):\n",
    "    '''\n",
    "    Makes HDR image using multiple LDR images, and its corresponding exposure values.\n",
    "    \n",
    "    The steps to implement:\n",
    "    1) Divide each images by its exposure time.\n",
    "        - This will rescale images as if it has been exposed for 1 second.\n",
    "    \n",
    "    2) Return average of above images\n",
    "    \n",
    "    \n",
    "    For further explanation, please refer to problem page for how to do it.\n",
    "      \n",
    "    Args:\n",
    "        ldr_images(np.ndarray): N x H x W x 3 shaped numpy array representing\n",
    "            N ldr images with width W, height H, and channel size of 3 (RGB)\n",
    "        exposures(list): list of length N, representing exposures of each images.\n",
    "            Each exposure should correspond to LDR images' exposure value.\n",
    "    Return:\n",
    "        (np.ndarray): H x W x 3 shaped numpy array representing HDR image merged using\n",
    "            naive ldr merging implementation.\n",
    "        (np.ndarray): N x H x W x 3 shaped numpy array represending log irradiances\n",
    "            for each exposures\n",
    "            \n",
    "    '''\n",
    "    N, H, W, C = ldr_images.shape\n",
    "    # sanity check\n",
    "    assert N == len(exposures)\n",
    "    \n",
    "    print(ldr_images.shape)\n",
    "    # TODO: Implement ldr_images + exposures -> HDR image function here\n",
    "    # np_exposures = N, shaped array\n",
    "    hdr_image = TODO()\n",
    "    log_irradiances = TODO()\n",
    "    \n",
    "    return hdr_image, log_irradiances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get HDR image, log irradiance\n",
    "naive_hdr_image, naive_log_irradiances = make_hdr_naive(ldr_images, exposures)\n",
    "\n",
    "# write HDR image to directory\n",
    "write_hdr_image(naive_hdr_image, 'images/outputs/naive_hdr.hdr')\n",
    "\n",
    "# display HDR image\n",
    "display_hdr_image(naive_hdr_image)\n",
    "\n",
    "# display log irradiance image\n",
    "display_log_irradiances(naive_log_irradiances)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def make_hdr_naive(ldr_images: np.ndarray, exposures: list) -> (np.ndarray, np.ndarray):\n",
    "    '''\n",
    "    Makes HDR image using multiple LDR images, and its corresponding exposure values.\n",
    "    \n",
    "    The steps to implement:\n",
    "    1) Divide each images by its exposure time.\n",
    "        - This will rescale images as if it has been exposed for 1 second.\n",
    "    \n",
    "    2) Return average of above images\n",
    "    \n",
    "    \n",
    "    For further explanation, please refer to problem page for how to do it.\n",
    "      \n",
    "    Args:\n",
    "        ldr_images(np.ndarray): N x H x W x 3 shaped numpy array representing\n",
    "            N ldr images with width W, height H, and channel size of 3 (RGB)\n",
    "        exposures(list): list of length N, representing exposures of each images.\n",
    "            Each exposure should correspond to LDR images' exposure value.\n",
    "    Return:\n",
    "        (np.ndarray): H x W x 3 shaped numpy array representing HDR image merged using\n",
    "            naive ldr merging implementation.\n",
    "        (np.ndarray): N x H x W x 3 shaped numpy array represending log irradiances\n",
    "            for each exposures\n",
    "            \n",
    "    '''\n",
    "    N, H, W, C = ldr_images.shape\n",
    "    # sanity check\n",
    "    assert N == len(exposures)\n",
    "    \n",
    "    print(ldr_images.shape)\n",
    "    print(exposures.shape)\n",
    "    x = ldr_images/ exposures\n",
    "    print(x.shape)\n",
    "    # TODO: Implement ldr_images + exposures -> HDR image function here\n",
    "    # np_exposures = N, shaped array\n",
    "    hdr_image = TODO()\n",
    "    log_irradiances = TODO()\n",
    "    \n",
    "    return hdr_image, log_irradiances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get HDR image, log irradiance\n",
    "naive_hdr_image, naive_log_irradiances = make_hdr_naive(ldr_images, exposures)\n",
    "\n",
    "# write HDR image to directory\n",
    "write_hdr_image(naive_hdr_image, 'images/outputs/naive_hdr.hdr')\n",
    "\n",
    "# display HDR image\n",
    "display_hdr_image(naive_hdr_image)\n",
    "\n",
    "# display log irradiance image\n",
    "display_log_irradiances(naive_log_irradiances)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def make_hdr_naive(ldr_images: np.ndarray, exposures: list) -> (np.ndarray, np.ndarray):\n",
    "    '''\n",
    "    Makes HDR image using multiple LDR images, and its corresponding exposure values.\n",
    "    \n",
    "    The steps to implement:\n",
    "    1) Divide each images by its exposure time.\n",
    "        - This will rescale images as if it has been exposed for 1 second.\n",
    "    \n",
    "    2) Return average of above images\n",
    "    \n",
    "    \n",
    "    For further explanation, please refer to problem page for how to do it.\n",
    "      \n",
    "    Args:\n",
    "        ldr_images(np.ndarray): N x H x W x 3 shaped numpy array representing\n",
    "            N ldr images with width W, height H, and channel size of 3 (RGB)\n",
    "        exposures(list): list of length N, representing exposures of each images.\n",
    "            Each exposure should correspond to LDR images' exposure value.\n",
    "    Return:\n",
    "        (np.ndarray): H x W x 3 shaped numpy array representing HDR image merged using\n",
    "            naive ldr merging implementation.\n",
    "        (np.ndarray): N x H x W x 3 shaped numpy array represending log irradiances\n",
    "            for each exposures\n",
    "            \n",
    "    '''\n",
    "    N, H, W, C = ldr_images.shape\n",
    "    # sanity check\n",
    "    assert N == len(exposures)\n",
    "    \n",
    "    print(ldr_images.shape)\n",
    "    print(exposures)\n",
    "    x = ldr_images/ exposures\n",
    "    print(x.shape)\n",
    "    # TODO: Implement ldr_images + exposures -> HDR image function here\n",
    "    # np_exposures = N, shaped array\n",
    "    hdr_image = TODO()\n",
    "    log_irradiances = TODO()\n",
    "    \n",
    "    return hdr_image, log_irradiances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get HDR image, log irradiance\n",
    "naive_hdr_image, naive_log_irradiances = make_hdr_naive(ldr_images, exposures)\n",
    "\n",
    "# write HDR image to directory\n",
    "write_hdr_image(naive_hdr_image, 'images/outputs/naive_hdr.hdr')\n",
    "\n",
    "# display HDR image\n",
    "display_hdr_image(naive_hdr_image)\n",
    "\n",
    "# display log irradiance image\n",
    "display_log_irradiances(naive_log_irradiances)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def make_hdr_naive(ldr_images: np.ndarray, exposures: list) -> (np.ndarray, np.ndarray):\n",
    "    '''\n",
    "    Makes HDR image using multiple LDR images, and its corresponding exposure values.\n",
    "    \n",
    "    The steps to implement:\n",
    "    1) Divide each images by its exposure time.\n",
    "        - This will rescale images as if it has been exposed for 1 second.\n",
    "    \n",
    "    2) Return average of above images\n",
    "    \n",
    "    \n",
    "    For further explanation, please refer to problem page for how to do it.\n",
    "      \n",
    "    Args:\n",
    "        ldr_images(np.ndarray): N x H x W x 3 shaped numpy array representing\n",
    "            N ldr images with width W, height H, and channel size of 3 (RGB)\n",
    "        exposures(list): list of length N, representing exposures of each images.\n",
    "            Each exposure should correspond to LDR images' exposure value.\n",
    "    Return:\n",
    "        (np.ndarray): H x W x 3 shaped numpy array representing HDR image merged using\n",
    "            naive ldr merging implementation.\n",
    "        (np.ndarray): N x H x W x 3 shaped numpy array represending log irradiances\n",
    "            for each exposures\n",
    "            \n",
    "    '''\n",
    "    N, H, W, C = ldr_images.shape\n",
    "    # sanity check\n",
    "    assert N == len(exposures)\n",
    "    \n",
    "  \n",
    "    # TODO: Implement ldr_images + exposures -> HDR image function here\n",
    "    # np_exposures = N, shaped array\n",
    "    new_image = ldr_images/ exposures\n",
    "    for i in range(0,N):\n",
    "        total = new_image[i,:,:,:]\n",
    "        \n",
    "    hdr_image = total/N\n",
    "    log_irradiances = np.log(ldr_images) - np.log(exposures)\n",
    "    \n",
    "    return hdr_image, log_irradiances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get HDR image, log irradiance\n",
    "naive_hdr_image, naive_log_irradiances = make_hdr_naive(ldr_images, exposures)\n",
    "\n",
    "# write HDR image to directory\n",
    "write_hdr_image(naive_hdr_image, 'images/outputs/naive_hdr.hdr')\n",
    "\n",
    "# display HDR image\n",
    "display_hdr_image(naive_hdr_image)\n",
    "\n",
    "# display log irradiance image\n",
    "display_log_irradiances(naive_log_irradiances)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get HDR image, log irradiance\n",
    "naive_hdr_image, naive_log_irradiances = make_hdr_naive(ldr_images, exposures)\n",
    "\n",
    "# write HDR image to directory\n",
    "#write_hdr_image(naive_hdr_image, 'images/outputs/naive_hdr.hdr')\n",
    "\n",
    "# display HDR image\n",
    "display_hdr_image(naive_hdr_image)\n",
    "\n",
    "# display log irradiance image\n",
    "display_log_irradiances(naive_log_irradiances)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "naive_hdr_image.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get HDR image, log irradiance\n",
    "naive_hdr_image, naive_log_irradiances = make_hdr_naive(ldr_images, exposures)\n",
    "\n",
    "# write HDR image to directory\n",
    "write_hdr_image(naive_hdr_image, 'images/outputs/naive_hdr.hdr')\n",
    "\n",
    "# display HDR image\n",
    "display_hdr_image(naive_hdr_image)\n",
    "\n",
    "# display log irradiance image\n",
    "display_log_irradiances(naive_log_irradiances)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "display_hdr_image(naive_hdr_image)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "display_hdr_image(naive_hdr_image)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "naive_hdr_image.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get HDR image, log irradiance\n",
    "naive_hdr_image, naive_log_irradiances = make_hdr_naive(ldr_images, exposures)\n",
    "\n",
    "# write HDR image to directory\n",
    "write_hdr_image(naive_hdr_image, 'images/outputs/naive_hdr.hdr')\n",
    "\n",
    "# display HDR image\n",
    "display_hdr_image(naive_hdr_image)\n",
    "\n",
    "# display log irradiance image\n",
    "display_log_irradiances(naive_log_irradiances)"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
